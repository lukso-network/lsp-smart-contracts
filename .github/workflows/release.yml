name: Github + NPM Release

on:
  push:
    branches:
      - "main"

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    environment: publish
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_KEY }}

    steps:
      - uses: google-github-actions/release-please-action@v3
        id: release
        with:
          release-type: node
          package-name: "@lukso/lsp-smart-contracts"
          bump-minor-pre-major: true
          default-branch: main
          changelog-types: '[{"type": "feat!","section":"BREAKING CHANGES","hidden": false},{"type": "refactor!","section":"BREAKING CHANGES","hidden": false},{"type": "build!","section":"BREAKING CHANGES","hidden": false},{"type":"feat","section":"Features","hidden":false},{"type":"fix","section":"Bug Fixes","hidden":false},{"type":"chore","section":"Miscellaneous","hidden":false}]'
          command: manifest

      # The logic below handles the npm publication.
      # The `if` statements ensure that a publication only occurs when
      # a new release is created:

      - uses: actions/checkout@v4
        if: ${{ steps.release.outputs.releases_created }}

      - name: Use Node.js v22
        uses: actions/setup-node@v4
        if: ${{ steps.release.outputs.releases_created }}
        with:
          node-version: "22.x"
          registry-url: "https://registry.npmjs.org"
          scope: "@lukso"
          cache: "npm"

      - name: Install Dependencies
        if: ${{ steps.release.outputs.releases_created }}
        run: npm ci

      # `npm run build:package` will generate the artifacts with abis for release (artifacts/*.json)
      #
      # `npm run build:types` will generate the Typescript typed abis (abi.ts)
      #
      # `npm run build:js` will generate the `dist/` folder and include:
      # - the constants for:
      #   - methods (`FunctionSelectors`)
      #   - errors (`ErrorSelectors`)
      #   - events (`EventSigHashes`)
      #   - state variables (`StateVariables`)
      # - the typed ABIs that can be exported in ESM / common JS
      #
      # We want the `artifacts/` folder to be in the format `artifacts/*.json`. So we need to run `npm run build:package` twice:
      # - 1st time so that `npm run build:types` generate the typed ABIs consumed from `artifacts/*.json`
      #Â - 2nd time to regenerate the `artifacs/*.json` structure as `npm run build:js` cleans the `artifacts/` folder, re-compile the contracts and regenerate artifacts with `artifacts/**/*.json` structure
      - name: Prepare artifacts to publish
        if: ${{ steps.release.outputs.releases_created }}
        run: |
          npm run build:package 
          npm run build:types
          npm run build:js
          npm run build:package

      - name: Publish on NPM
        if: ${{ steps.release.outputs.releases_created }}
        run: |
          (cat <<END > outputs.json
          ${{toJSON(steps.release.outputs)}}
          END
          )
          node ./publish.mjs outputs.json

  deploy-verify:
    needs: release-please
    if: ${{ steps.release.outputs.releases_created }}
    strategy:
      matrix:
        network: ["luksoTestnet", "luksoMainnet"]
    runs-on: ubuntu-latest
    env:
      # 0x983aBC616f2442bAB7a917E6bb8660Df8b01F3bF
      CONTRACT_VERIFICATION_TESTNET_PK: ${{ secrets.CONTRACT_VERIFICATION_TESTNET_PK }}
      # 0xF0efeD8d49c0FA6CFC861Bf0311b6B3a4414e4b7
      CONTRACT_VERIFICATION_MAINNET_PK: ${{ secrets.CONTRACT_VERIFICATION_MAINNET_PK }}
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js v22
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build contract artifacts
        run: npm run build

      - name: Deploy & verify contracts on ${{ matrix.network }}
        run: |
          (cat <<END > outputs.json
          ${{toJSON(steps.release.outputs)}}
          END
          )
          node ./deploy-verify.mjs outputs.json ${{ matrix.network }}
